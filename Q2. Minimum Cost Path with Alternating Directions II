typedef long long ll;
const ll INF = 1e18;
class Solution {
public:
    long long minCost(int m, int n, vector<vector<int>>& waitCost) {
         vector<vector<ll>> dp0(m, vector<ll>(n, INF));
    vector<vector<ll>> dp1(m, vector<ll>(n, INF));

    dp1[0][0] = 1;  // Start at (0,0) at second 1

    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            ll entryCost = (ll)(i + 1) * (j + 1);

            // If we can come from top
            if (i > 0) dp0[i][j] = min(dp0[i][j], dp1[i - 1][j] + entryCost);
            // If we can come from left
            if (j > 0) dp0[i][j] = min(dp0[i][j], dp1[i][j - 1] + entryCost);
            // For (0,0) we skip, because dp1[0][0] is already entry cost.

            // If we arrived, must wait next
            if (dp0[i][j] < INF) {
                dp1[i][j] = dp0[i][j] + waitCost[i][j];
            }
        }
    }

    // Maybe we can end on move or after wait â€” so both possible.
    return min(dp0[m - 1][n - 1], dp1[m - 1][n - 1]);
    }
};
