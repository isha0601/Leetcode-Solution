class Solution {
public:

    long long countAtLeastK(const string& word, int k) {
    long long validCount = 0;
    int left = 0, right = 0, consonantCount = 0;
    unordered_map<char, int> vowelFreq;

    while (right < word.length()) {
      if (isVowel(word[right])) {
        vowelFreq[word[right]]++;
      } else {
        consonantCount++;
      }

      while (vowelFreq.size() == 5 && consonantCount >= k) {
        validCount += word.length() - right;
        if (isVowel(word[left])) {
          if (--vowelFreq[word[left]] == 0) {
            vowelFreq.erase(word[left]);
          }
        } else {
          consonantCount--;
        }
        left++;
      }
      right++;
    }
    return validCount;
  }

  bool isVowel(char c) {
    return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';
  }

  long long countOfSubstrings(string word, int k) {
    return countAtLeastK(word, k) - countAtLeastK(word, k + 1);
  }
};
