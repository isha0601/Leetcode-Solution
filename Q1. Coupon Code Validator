class Solution {
public:
    bool isValidCode(const string& code) {
    if (code.empty()) return false;
    for (char c : code) {
        if (!isalnum(c) && c != '_') return false;
    }
    return true;
}
    vector<string> validateCoupons(vector<string>& code, vector<string>& businessLine, vector<bool>& isActive) {
        unordered_map<string, int> businessOrder = {
        {"electronics", 0},
        {"grocery", 1},
        {"pharmacy", 2},
        {"restaurant", 3}
    };

    vector<pair<pair<int, string>, string>> validList;

    for (int i = 0; i < code.size(); ++i) {
        if (isValidCode(code[i]) && 
            businessOrder.count(businessLine[i]) && 
            isActive[i]) {
            validList.push_back({{businessOrder[businessLine[i]], code[i]}, code[i]});
        }
    }

    sort(validList.begin(), validList.end());

    vector<string> result;
    for (auto& entry : validList) {
        result.push_back(entry.second);
    }
    return result;
    }
};
