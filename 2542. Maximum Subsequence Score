class Solution {
public:
    long long maxScore(vector<int>& nums1, vector<int>& nums2, int k) {
         int n = nums1.size();
        vector<pair<int,int>> pairs(n);
        for (int i = 0; i < n; i++) {
            pairs[i] = {nums2[i], nums1[i]};
        }
        sort(pairs.rbegin(), pairs.rend());
        long long result = 0, sum = 0;
        priority_queue<int, vector<int>, greater<int>> minHeap; 
        for (auto &[num2, num1] : pairs) {
            sum += num1;
            minHeap.push(num1);
            if ((int)minHeap.size() > k) {
                sum -= minHeap.top();
                minHeap.pop();
            }
            if ((int)minHeap.size() == k) {
                result = max(result, sum * 1LL * num2);
            }
        }
        return result;
    }
};
